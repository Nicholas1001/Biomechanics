
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/imgcodecs.hpp>
#include <vector>
#include <iostream>
#include <fstream>

using namespace cv;
using namespace std;

int width, height;

Mat imgray, imbw, im2, im2bw;
int thresh = 100;
RNG rng(12345);

int main( int argc, char** argv )
{
    
    Mat im = imread("/Users/louissherratt/Documents/opentest/opentest/Rad1x.png");
    // Check for failure
    if (im.empty())
    {
     cout << "Could not open or find the image" << endl;
     cin.get(); //wait for any key press
     return -1;
    }
    
    Mat im2 = imread("/Users/louissherratt/Documents/opentest/opentest/Rad2x.png");
    // Check for failure
    if (im2.empty())
    {
     cout << "Could not open or find the 2nd image" << endl;
     cin.get(); //wait for any key press
     return -1;
    }
    
    width= im.size().width;
    height= im.size().height;
    cout << "Width : " << width << endl;
    cout << "Height: " << height << endl;
    
    cvtColor(im, imgray, COLOR_BGR2GRAY);
    threshold(imgray, imbw, 50, 255,THRESH_BINARY);
    
    cvtColor(im2, imgray, COLOR_BGR2GRAY);
    threshold(imgray, im2bw, 50, 255,THRESH_BINARY);
    
        const char* source_window = "Source";
        namedWindow( source_window );
        imshow( source_window, imbw );
    
        const char* source2_window = "Source2";
        namedWindow( source2_window );
        imshow( source2_window, im2bw );
    
   
    
    Mat canny_output;
    Canny( imbw, canny_output, thresh, thresh*2 );
    
    Mat canny_output2;
    Canny( im2bw, canny_output2, thresh, thresh*2 );
    
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    
    vector<vector<Point> > contours2;
    vector<Vec4i> hierarchy2;
    
    findContours(canny_output, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);
    Mat drawing = Mat::zeros( canny_output.size(), CV_8UC3 );
    
    findContours(canny_output2, contours2, hierarchy2, RETR_TREE, CHAIN_APPROX_SIMPLE);
    Mat drawing2 = Mat::zeros( canny_output2.size(), CV_8UC3 );
    
    for( size_t i = 0; i< contours.size(); i++ )
        {
            Scalar color = Scalar( rng.uniform(0, 256), rng.uniform(0,256), rng.uniform(0,256) );
            drawContours( drawing, contours, (int)i, color, 2, LINE_8, hierarchy, 0 );
        }
        imshow( "Contours", drawing );

    for( size_t i = 0; i< contours.size(); i++ )
        {
            Scalar color = Scalar( rng.uniform(0, 256), rng.uniform(0,256), rng.uniform(0,256) );
            drawContours( drawing2, contours2, (int)i, color, 2, LINE_8, hierarchy2, 0 );
        }
        imshow( "Contours2", drawing2 );

    ofstream myfile;
      myfile.open ("example.scad");
      myfile << "difference(){"<< endl;
      //myfile << "translate([-" <<2*width << ",0,0])" << endl <<
      myfile << "linear_extrude(" << width <<")" << endl << "polygon([";
    //for (int i = 0; i < contours.size(); i++)
      for (int j = 0; j < contours2[0].size(); j++){
              myfile << contours2[0][j] << ",";
        }
      myfile << "]);" << endl;
      myfile << "translate(["<< width <<",-5,-5])" << endl << "rotate([0,-90,0])" << endl;
      myfile << "difference(){" << endl;
      myfile << "cube(["<< width+10 <<"," << height << "," << width+10 << "]);" << endl;
      myfile << "linear_extrude(" << width +20 <<")" << endl << "polygon([";
      //for (int i = 0; i < contours.size(); i++)
      for (int j = 0; j < contours[0].size(); j++){
                myfile << contours[0][j] << ",";
          }
      
      myfile << "]);}}";
      myfile.close();
  
      // << "translate([-" << width+25 << ",-" << 0 << ",-" << 5 <<"])" << endl
    
    waitKey();
return 0;
}
